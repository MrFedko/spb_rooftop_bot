import httplib2
from apiclient import discovery
from oauth2client.service_account import ServiceAccountCredentials
from info import roof_bot, Mikhail, Kirill
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram_calendar import simple_cal_callback, SimpleCalendar
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3


class Form(StatesGroup):
    number = State()
    set_id = State()


# create logging and db of orders
# conn = sqlite3.connect('log.db')
# cur = conn.cursor()
# cur.execute('CREATE TABLE users(date TEXT, user_id TEXT, username TEXT)')
#
# order = sqlite3.connect('order.db')
# cursor = order.cursor()
# cursor.execute('CREATE TABLE users(date_of_order TEXT, trip TEXT,'
#                ' count_peoples TEXT, date_trip TEXT, format TEXT, cost TEXT, '
#                'total TEXT, user_name TEXT, telephone TEXT)')


# add our bot and memory storage
token_bot = roof_bot.token
bot = Bot(token_bot)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# add google sheets
CREDENTIALS_FILE = "googlesheets.json"
credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CREDENTIALS_FILE,
    ['https://www.googleapis.com/auth/spreadsheets',
     'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = discovery.build('sheets', 'v4', http=httpAuth)
values = service.spreadsheets().values().get(
    spreadsheetId=roof_bot.spreadsheet_id,
    range='A2:K10',
    majorDimension='ROWS'
).execute()

all_roads = values['values']  # all sheet on this place
markup = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
for num, road in enumerate(all_roads):
    markup.add(types.InlineKeyboardButton(text=road[0], callback_data=f"road {num}"))  # create buttons on first collumn


@dp.message_handler(commands="start", state='*')
async def start_message(message: types.Message):
    await message.answer("""üëã –ü—Ä–∏–≤–µ—Ç. 
–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∫—Ä—ã—à–∞–º –∏–ª–∏ –ø–∞—Ä–∞–¥–Ω—ã–º –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.
–ì–ª–∞–≤–Ω–æ–µ –º–æ—ë –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ: –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ª—é–±–æ–π —Ç–∏–ø —ç–∫—Å–∫—É—Ä—Å–∏–π.""",
                         reply_markup=markup)
    conn = sqlite3.connect('log.db')
    cur = conn.cursor()
    cur.execute(
        f'INSERT INTO users VALUES("{message.date}", "{message.from_user.id}", "@{message.from_user.username}")')
    conn.commit()


@dp.callback_query_handler(lambda c: c.data.startswith('start'), state='*')
async def start_message(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, """–ú–æ–∂–Ω–æ –∏ –≤—Å–µ—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.""",
                           reply_markup=markup)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('road'), state='*')  # catch handlers of excursions
async def show_about_road(callback_query: types.CallbackQuery, state: FSMContext):
    number_of_road = callback_query.data.split()[1]
    road = all_roads[int(number_of_road)]
    all_buttons = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    all_buttons.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start"),
                    types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É üóìÔ∏è", callback_data=f"date_road {number_of_road}"))
    all_buttons.add(types.InlineKeyboardButton(text="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üåÑ", callback_data=f"about {number_of_road}"))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_photo(callback_query.from_user.id,
                         road[10], f"""*{road[1]}*
                         
{road[8]}

‚è±Ô∏è *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {road[3]}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*
> üö∂üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è –≤ —Å–æ—Å—Ç–∞–≤–µ –≥—Ä—É–ø–ø—ã {road[4]}
> üö∂ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è {road[6]}
""", parse_mode=types.ParseMode.MARKDOWN, reply_markup=all_buttons)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('about'), state='*')  # –ª–æ–≤–∏–º —Ö—ç–Ω–¥–ª–µ—Ä —ç–∫—Å–∫—É—Ä—Å–∏–∏
async def show_full_info_road(callback_query: types.CallbackQuery, state: FSMContext):
    number_of_road = callback_query.data.split()[1]
    road = all_roads[int(number_of_road)]
    await bot.answer_callback_query(callback_query.id)
    all_buttons = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    all_buttons.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"road {number_of_road}"),
                    types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É üóìÔ∏è", callback_data=f"date_road {number_of_road}"))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_photo(callback_query.from_user.id,
                         road[9],
                         road[2], parse_mode=types.ParseMode.MARKDOWN, reply_markup=all_buttons)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('date_road'), state='*')  # –ª–æ–≤–∏–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–∞—Ç—ã
async def select_date_road(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["number of road"] = callback_query.data.split()[1]
        data["count"] = 1
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
                           reply_markup=await SimpleCalendar().start_calendar())
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(simple_cal_callback.filter(), state='*')
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    async with state.proxy() as data:
        count_people = data["count"]
    button = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button.add(types.InlineKeyboardButton(text="üö∂üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è –ì—Ä—É–ø–ø–∞", callback_data="group"),
               types.InlineKeyboardButton(text="üö∂ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ", callback_data="individual"))
    button.add(types.InlineKeyboardButton(text="‚¨á –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ ‚¨á", callback_data="_"))
    button.add(types.InlineKeyboardButton(text="‚ûñ", callback_data="-"),
               types.InlineKeyboardButton(text=count_people, callback_data="_"),
               types.InlineKeyboardButton(text="‚ûï", callback_data="+"))
    await bot.answer_callback_query(callback_query.id)
    if selected:
        await callback_query.message.answer(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ *{date.strftime("%d/%m/%Y")}*
        
–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è.
üö∂üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è *–ì—Ä—É–ø–ø–∞* - –í—ã –ø–æ–π–¥—ë—Ç–µ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏—Å–∫–∞—Ç–µ–ª—è–º–∏ –Ω–æ–≤–æ–≥–æ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ.
üö∂ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ* - —Ç–æ–ª—å–∫–æ –í—ã, –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –∏ –≥–∏–¥.''', parse_mode=types.ParseMode.MARKDOWN, reply_markup=button)
    async with state.proxy() as data:
        data['date'] = date.strftime("%d/%m/%Y")
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda call: call.data in ("-", "+"),
                           state='*')  # change inline keyboard and select count of peoples
async def next_keyboard(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback_query.data == "+":
            data["count"] += 1
        elif callback_query.data == "-":
            if data["count"] > 1:
                data["count"] -= 1
        count_people = data["count"]
    await bot.answer_callback_query(callback_query.id)
    button = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button.add(types.InlineKeyboardButton(text="üö∂üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è –ì—Ä—É–ø–ø–∞", callback_data="group"),
               types.InlineKeyboardButton(text="üö∂ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ", callback_data="individual"))
    button.add(types.InlineKeyboardButton(text="‚¨á –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ ‚¨á", callback_data="_"))
    button.add(types.InlineKeyboardButton(text="‚ûñ", callback_data="-"),
               types.InlineKeyboardButton(text=count_people, callback_data="_"),
               types.InlineKeyboardButton(text="‚ûï", callback_data="+"))
    await callback_query.message.edit_reply_markup(button)


@dp.callback_query_handler(lambda c: c.data in ("group", "individual"), state='*')  # select time of road
async def select_time_road(callback_query: types.CallbackQuery, state: FSMContext):
    button_1 = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # 10 - 22
    button_2 = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # 10 - 18
    button_3 = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # 11 - 15
    array = [types.InlineKeyboardButton(text=f"{time}:00", callback_data=f"time {time}") for time in range(10, 23, 2)]
    button_1.add(*array)
    button_2.add(*array[0:5])
    array_2 = [types.InlineKeyboardButton(text=f"{time}:00", callback_data=f"time {time}") for time in range(11, 16, 2)]
    button_3.add(*array_2)
    current_buttons = None
    await bot.answer_callback_query(callback_query.id)
    async with state.proxy() as data:
        data["format"] = callback_query.data
        if data["number of road"] in ('3', '4'):
            if 2 <= int(data['date'].split('/')[1]) <= 9:
                current_buttons = button_2
            else:
                current_buttons = button_3
        elif data["number of road"] in ('0', '1', '2') and data['format'] == 'group':
            current_buttons = button_1
    if current_buttons:
        current_buttons.add(types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–π üåÑ", callback_data="start"))
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏", reply_markup=current_buttons)
    else:
        current_buttons = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        current_buttons.add(types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"time any"))
        await callback_query.message.answer("–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –≥–∏–¥–æ–º.",
                                            reply_markup=current_buttons)
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith("time"), state='*')
async def get_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await Form.number.set()
    async with state.proxy() as data:
        if callback_query.data.endswith('any'):
            data['time'] = '–≤—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Å—É–¥–∏—Ç—å'
        else:
            data['time'] = callback_query.data.split()[1] + ":00"
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ üì≤")
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.message_handler(state=Form.number)  # finally
async def create_order_road(message: types.Message, state: FSMContext):
    current_buttons = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    current_buttons.add(types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≥–∏–¥—É üßç‚Äç‚ôÇÔ∏è", callback_data="ready"))
    current_buttons.add(types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–π üåÑ", callback_data="start"))
    all_info = []
    async with state.proxy() as data:
        for k, v in data.items():
            all_info.append(v)
    cost = 0
    if all_info[3] == "group":
        a = [790, 900, 790, 990, 790, 1000]
        cost = a[int(all_info[0])]
        all_info[3] = "–≤ —Å–æ—Å—Ç–∞–≤–µ –≥—Ä—É–ø–ø—ã"
    else:
        if int(all_info[1]) == 1:
            b = [1500, 1500, 1300, 3500, 3000, 3000]
            cost = b[int(all_info[0])]
        else:
            c = [1500, 1500, 1300, 1800, 1500, 2000]
            cost = c[int(all_info[0])]
        all_info[3] = "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è"

    total = (cost * all_info[1]) * 0.9
    async with state.proxy() as data:
        data["cost"] = cost
        data["total"] = total
        data["name"] = message.from_user.username
        data["number"] = message.text
    await message.answer(f"""*–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:* {all_roads[int(all_info[0])][1]}
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:* {all_info[1]}
*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {all_info[2]}  {all_info[4]}
*–§–æ—Ä–º–∞—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è:* {all_info[3]}
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {cost} ‚úñ {all_info[1]} ‚ûñ 10 % = {total}
*–¢–µ–ª–µ—Ñ–æ–Ω:* {message.text}

""", reply_markup=current_buttons, parse_mode=types.ParseMode.MARKDOWN)
    await bot.delete_message(message.from_user.id, message.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith("ready"), state='*')  # finally
async def send_order_road(callback_query: types.CallbackQuery, state: FSMContext):
    current_buttons = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    current_buttons.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–π", callback_data="start"))
    async with state.proxy() as data:
        message = f"""–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: {all_roads[int(data["number of road"])][1]}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {int(data["count"])}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data["date"]}     {data["time"]}
–§–æ—Ä–º–∞—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è: {data["format"]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {int(data["cost"])} ‚úñ {int(data["count"])} ‚ûñ 10 % = {int(data["total"])}
Telegram username: @{data["name"]}
–¢–µ–ª–µ—Ñ–æ–Ω: {data["number"]}"""

        conn = sqlite3.connect('order.db')
        cur = conn.cursor()
        cur.execute(
            f'INSERT INTO users VALUES("{callback_query.message.date}", "{all_roads[int(data["number of road"])][0]}", '
            f'"{data["count"]}", "{data["date"]}", "{data["format"]}", "{data["cost"]}", '
            f'"{data["total"]}", "@{data["name"]}", "{data["number"]}")')
        conn.commit()

    try:
        await bot.send_message(Kirill.user_id, message, disable_notification=False)
        await bot.send_message(Mikhail.user_id, message, disable_notification=False)
    except:
        await bot.send_message(Mikhail.user_id, "Only you" + message, disable_notification=False)

    await callback_query.message.answer("–Ø –ø–µ—Ä–µ–¥–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≥–∏–¥—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                                        reply_markup=current_buttons)
    await state.finish()
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)


@dp.message_handler(commands="secret", state='*')  # all commands
async def start_message(message: types.Message):
    await message.answer("""/money
/reset
/how_are_you
/friends
/all_friends
/message""")


@dp.message_handler(commands="message", state='*')
async def get_id(mess: types.Message):
    await Form.set_id.set()
    await mess.answer("Set id user & message")


@dp.message_handler(state=Form.set_id)
async def send_message_with_id(message: types.Message, state: FSMContext):
    id, text = message.text.split("&")
    await bot.send_message(id, text, disable_notification=False)
    await state.finish()




@dp.message_handler(commands="money", state='*')  # how much money did i make
async def start_message(message: types.Message):
    conn = sqlite3.connect('order.db')
    cur = conn.cursor()
    cur.execute(f'SELECT total, date_trip FROM users')
    result = cur.fetchall()
    result_mes = ''
    tot = 0
    for i in result:
        result_mes += f'{i[1]}: {str(float(i[0]) / 9)} \n'
        tot += float(i[0]) / 9
    result_mes += f'–ò—Ç–æ–≥–æ: {tot}'
    conn.commit()
    await message.answer(result_mes)


@dp.message_handler(commands="how_are_you", state='*')  # all trips
async def start_message(message: types.Message):
    conn = sqlite3.connect('order.db')
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM users')
    result = cur.fetchall()
    result_mes = ""
    for i in result:
        result_mes += str(i) + "\n"
    conn.commit()
    await message.answer(str(result_mes))


@dp.message_handler(commands="friends", state='*')  # all users of bot
async def start_message(message: types.Message):
    conn = sqlite3.connect('log.db')
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM users  GROUP BY user_id ORDER BY date')
    result = cur.fetchall()
    result_mes = ""
    for i in result:
        result_mes += str(i) + "\n"
    conn.commit()
    await message.answer(str(result_mes))


@dp.message_handler(commands="all_friends", state='*')  # all users of bot
async def start_message(message: types.Message):
    conn = sqlite3.connect('log.db')
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM users')
    result = cur.fetchall()
    result_mes = ""
    for i in result[-20:]:
        result_mes += str(i) + "\n"
    conn.commit()
    await message.answer(str(result_mes))


@dp.message_handler(commands="reset", state='*')  # reset total column
async def start_message(message: types.Message):
    conn = sqlite3.connect('order.db')
    cur = conn.cursor()
    cur.execute(f'UPDATE users SET total = 0 WHERE total != 0')
    result = cur.fetchall()
    result_mes = 0
    for i in result:
        result_mes += float(i[0]) / 9
    conn.commit()
    await message.answer(str(result_mes))


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
